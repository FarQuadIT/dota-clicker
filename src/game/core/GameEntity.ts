/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (–≥–µ—Ä–æ–∏, –≤—Ä–∞–≥–∏)
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:
 * 1. –†–∞—Å—à–∏—Ä—è–µ—Ç AnimatedSprite - –ø–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–Ω–∏–º–∞—Ü–∏–π
 * 2. –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (–∑–¥–æ—Ä–æ–≤—å–µ, —É—Ä–æ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏—è)
 * 3. –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–ª–æ—Å–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è/–º–∞–Ω—ã
 * 4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * 
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ hero.js –∏ creep.js
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: all_pixijs_content.txt —Ä–∞–∑–¥–µ–ª—ã "Graphics" –∏ "Containers"
 */

import { Graphics, Texture } from 'pixi.js';
import { AnimatedSprite } from './AnimatedSprite';

// ==================================================================================
// –¢–ò–ü–´ –î–ê–ù–ù–´–• –î–õ–Ø –ò–ì–†–û–í–´–• –°–£–©–ù–û–°–¢–ï–ô
// ==================================================================================

/**
 * –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
 */
interface EntityStats {
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ */
  maxHealth: number;
  
  /** –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ */
  currentHealth: number;
  
  /** –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è (–≤ —Å–µ–∫—É–Ω–¥—É) */
  healthRegen: number;
  
  /** –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω */
  damage: number;
  
  /** –£—Ä–æ–≤–µ–Ω—å —Å—É—â–Ω–æ—Å—Ç–∏ */
  level: number;
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
 */
enum EntityState {
  IDLE = 'idle',           // –û–∂–∏–¥–∞–Ω–∏–µ
  MOVING = 'moving',       // –î–≤–∏–∂–µ–Ω–∏–µ
  ATTACKING = 'attacking', // –ê—Ç–∞–∫–∞
  DYING = 'dying',         // –°–º–µ—Ä—Ç—å
  DEAD = 'dead'           // –ú–µ—Ä—Ç–≤
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
 */
interface HealthBarConfig {
  /** –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ */
  width: number;
  
  /** –í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Å–∫–∏ */
  height: number;
  
  /** –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–∏ */
  offsetY: number;
  
  /** –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ */
  backgroundColor: number;
  
  /** –¶–≤–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–æ—Å–∫–∏ */
  fillColor: number;
  
  /** –¶–≤–µ—Ç —Ä–∞–º–∫–∏ */
  borderColor: number;
}

// ==================================================================================
// –ö–õ–ê–°–° –ò–ì–†–û–í–û–ô –°–£–©–ù–û–°–¢–ò
// ==================================================================================

/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 * 
 * –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç AnimatedSprite, –¥–æ–±–∞–≤–ª—è–µ—Ç:
 * - –°–∏—Å—Ç–µ–º—É –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è
 * - –ë–∞–∑–æ–≤—É—é –±–æ–µ–≤—É—é –ª–æ–≥–∏–∫—É
 */
export abstract class GameEntity extends AnimatedSprite {
  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏
  protected stats: EntityStats;
  
  // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
  protected currentState: EntityState = EntityState.IDLE;
  
  // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  protected isAliveFlag: boolean = true;
  protected isCollidingFlag: boolean = false;
  protected isDyingFlag: boolean = false;
  
  // –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–æ—Å–æ–∫
  protected healthBarContainer: Graphics | null = null;
  protected healthBarConfig: HealthBarConfig;
  
  // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
  protected healthRegenTimer: number = 0;
  
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
   * 
   * @param initialStats - –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
   * @param initialTexture - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
   */
  constructor(initialStats: EntityStats, initialTexture?: Texture) {
    super(initialTexture);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    this.stats = { ...initialStats };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ä–∞–≤–Ω—ã–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É
    this.stats.currentHealth = this.stats.maxHealth;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.healthBarConfig = {
      width: 80,
      height: 8,
      offsetY: -50,
      backgroundColor: 0x440000, // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
      fillColor: 0xFF4444,       // –ö—Ä–∞—Å–Ω—ã–π
      borderColor: 0xFFFFFF      // –ë–µ–ª—ã–π
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    this.createHealthBar();
    
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å: HP=${this.stats.maxHealth}, DMG=${this.stats.damage}`);
  }

  // ==================================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê–ú–ò
  // ==================================================================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
   * 
   * @param damageAmount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
   * @param source - –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Ä–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  public takeDamage(damageAmount: number, source?: GameEntity): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω
    if (!this.isAliveFlag || this.isDyingFlag) {
      return;
    }
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    this.stats.currentHealth = Math.max(0, this.stats.currentHealth - damageAmount);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    this.updateHealthBar();
    
    console.log(`üí• –ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω ${damageAmount}, –æ—Å—Ç–∞–ª–æ—Å—å HP: ${this.stats.currentHealth}/${this.stats.maxHealth}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
    if (this.stats.currentHealth <= 0) {
      this.die();
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–Ω–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
    this.onTakeDamage(damageAmount, source);
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
   * 
   * @param healAmount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
   */
  public heal(healAmount: number): void {
    if (!this.isAliveFlag) return;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
    this.stats.currentHealth = Math.min(this.stats.maxHealth, this.stats.currentHealth + healAmount);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    this.updateHealthBar();
    
    console.log(`üíö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${healAmount} HP, —Ç–µ–ø–µ—Ä—å: ${this.stats.currentHealth}/${this.stats.maxHealth}`);
  }

  /**
   * –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –¥—Ä—É–≥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
   * 
   * @param target - —Ü–µ–ª—å –∞—Ç–∞–∫–∏
   */
  public dealDamageTo(target: GameEntity): void {
    if (!this.isAliveFlag || !target.isAlive()) {
      return;
    }
    
    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
    target.takeDamage(this.stats.damage, this);
    
    console.log(`‚öîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω —É—Ä–æ–Ω ${this.stats.damage} —Ü–µ–ª–∏`);
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ç–∞–∫–∏
    this.onDealDamage(target);
  }

  // ==================================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò
  // ==================================================================================

  /**
   * –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
   * 
   * @param newState - –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  protected changeState(newState: EntityState): void {
    if (this.currentState === newState) return;
    
    const oldState = this.currentState;
    this.currentState = newState;
    
    console.log(`üîÑ –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${oldState} ‚Üí ${newState}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.onStateChange(oldState, newState);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    this.playStateAnimation();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  protected playStateAnimation(): void {
    // –ë–∞–∑–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    switch (this.currentState) {
      case EntityState.IDLE:
        this.playAnimation('idle');
        break;
      case EntityState.MOVING:
        this.playAnimation('run');
        break;
      case EntityState.ATTACKING:
        this.playAnimation('attack');
        break;
      case EntityState.DYING:
        this.playAnimation('death');
        break;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  protected die(): void {
    if (this.isDyingFlag || !this.isAliveFlag) return;
    
    console.log('üíÄ –°—É—â–Ω–æ—Å—Ç—å —É–º–∏—Ä–∞–µ—Ç...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    this.isDyingFlag = true;
    this.isAliveFlag = false;
    
    // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.changeState(EntityState.DYING);
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—Ä—Ç–∏
    this.onDeath();
  }

  // ==================================================================================
  // –í–ò–ó–£–ê–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
  // ==================================================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
   */
  protected createHealthBar(): void {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    this.healthBarContainer = new Graphics();
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ª–æ—Å–∫—É –Ω–∞–¥ —Å—É—â–Ω–æ—Å—Ç—å—é
    this.healthBarContainer.y = this.healthBarConfig.offsetY;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç
    this.addChild(this.healthBarContainer);
    
    // –†–∏—Å—É–µ–º –ø–æ–ª–æ—Å–∫—É
    this.updateHealthBar();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
   */
  protected updateHealthBar(): void {
    if (!this.healthBarContainer) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    this.healthBarContainer.clear();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è
    const healthPercent = this.stats.currentHealth / this.stats.maxHealth;
    
    const config = this.healthBarConfig;
    
    // –†–∏—Å—É–µ–º —Ñ–æ–Ω –ø–æ–ª–æ—Å–∫–∏
    this.healthBarContainer
      .rect(-config.width / 2, -config.height / 2, config.width, config.height)
      .fill({ color: config.backgroundColor });
    
    // –†–∏—Å—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏
    if (healthPercent > 0) {
      this.healthBarContainer
        .rect(-config.width / 2, -config.height / 2, config.width * healthPercent, config.height)
        .fill({ color: config.fillColor });
    }
    
    // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –ø–æ–ª–æ—Å–∫–∏
    this.healthBarContainer
      .rect(-config.width / 2, -config.height / 2, config.width, config.height)
      .stroke({ color: config.borderColor, width: 1 });
  }

  // ==================================================================================
  // –ò–ì–†–û–í–û–ô –¶–ò–ö–õ
  // ==================================================================================

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
   * 
   * @param deltaTime - –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
   */
  public update(deltaTime: number): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    this.updateAnimation(deltaTime);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
    this.updateHealthRegen(deltaTime);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤
    this.onUpdate(deltaTime);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
   * 
   * @param deltaTime - –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
   */
  protected updateHealthRegen(deltaTime: number): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤—å–µ
    if (!this.isAliveFlag || this.stats.healthRegen <= 0 || this.stats.currentHealth >= this.stats.maxHealth) {
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    this.healthRegenTimer += deltaTime;
    
    // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    if (this.healthRegenTimer >= 1000) {
      this.heal(this.stats.healthRegen);
      this.healthRegenTimer = 0;
    }
  }

  // ==================================================================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í –ù–ê–°–õ–ï–î–ù–ò–ö–ê–•
  // ==================================================================================

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  protected onTakeDamage(damageAmount: number, source?: GameEntity): void {
    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  protected onDealDamage(target: GameEntity): void {
    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  protected onDeath(): void {
    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  protected onStateChange(oldState: EntityState, newState: EntityState): void {
    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  protected onUpdate(deltaTime: number): void {
    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  // ==================================================================================
  // –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´
  // ==================================================================================

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤–∞ –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å */
  public isAlive(): boolean {
    return this.isAliveFlag;
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–º–∏—Ä–∞–µ—Ç –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å */
  public isDying(): boolean {
    return this.isDyingFlag;
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è */
  public isColliding(): boolean {
    return this.isCollidingFlag;
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
  public getState(): EntityState {
    return this.currentState;
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */
  public getStats(): Readonly<EntityStats> {
    return this.stats;
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è */
  public getCurrentHealth(): number {
    return this.stats.currentHealth;
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è */
  public getMaxHealth(): number {
    return this.stats.maxHealth;
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ */
  public getDamage(): number {
    return this.stats.damage;
  }

  // ==================================================================================
  // –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
  // ==================================================================================

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    if (this.healthBarContainer) {
      this.healthBarContainer.destroy();
      this.healthBarContainer = null;
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
    super.destroy();
    
    console.log('üóëÔ∏è GameEntity —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
export type { EntityStats, EntityState, HealthBarConfig };