// src/contexts/heroStore.ts

import { create } from "zustand";
import type { HeroStats } from "../shared/types";

/**
 * Интерфейс хранилища героя
 * Содержит текущие характеристики и методы для их изменения
 * 
 * Используется для централизованного управления статистикой героя
 * во всех компонентах приложения, включая отображение значений
 * и их обновление при покупке предметов
 */
interface HeroStore {
  /**
   * Текущие характеристики героя
   * Значение null означает, что данные еще не загружены
   * 
   * Характеристики загружаются при инициализации приложения
   * или устанавливаются как значения по умолчанию при ошибке загрузки
   */
  stats: HeroStats | null;
  
  /**
   * Полная установка всех характеристик героя
   * Используется при начальной загрузке данных с сервера
   * или при полном обновлении статистики
   * 
   * @param stats - Объект с характеристиками героя
   */
  setStats: (stats: HeroStats) => void;
  
  /**
   * Обновление конкретной характеристики героя
   * Используется при покупке улучшений или получении бонусов
   * 
   * Характеристика обновляется только если stats не равен null,
   * в противном случае метод не выполняет никаких изменений
   * 
   * @param key - Ключ изменяемой характеристики
   * @param value - Новое значение характеристики
   */
  updateStat: (key: keyof HeroStats, value: number) => void;
}

/**
 * Zustand-хранилище для характеристик героя
 * Позволяет получать, устанавливать и обновлять характеристики героя
 * через удобный хук, доступный из любого компонента
 * 
 * Преимущества использования Zustand:
 * - Минимальный бойлерплейт
 * - Простота использования
 * - Отсутствие дополнительных провайдеров (в отличие от Context API)
 * - Автоматическая оптимизация ре-рендеров
 */
export const useHeroStore = create<HeroStore>((set) => ({
  stats: null, // Изначально данных о герое нет

  // Устанавливаем все характеристики сразу
  setStats: (stats) => set({ stats }),

  // Обновляем одну конкретную характеристику
  updateStat: (key, value) =>
    set((state) => {
      // Если stats = null, возвращаем текущее состояние без изменений
      if (!state.stats) {
        return state;
      }
      
      // Обновляем только указанную характеристику, сохраняя остальные
      return { stats: { ...state.stats, [key]: value } };
    }),
}));