// src/shared/types/index.ts - расширенная версия

// Базовые типы для всего приложения

//------------------------------------------------------------------------------
// Характеристики героя
//------------------------------------------------------------------------------

/**
 * Интерфейс для характеристик героя
 * Определяет все характеристики, которыми обладает герой в игре
 * Используется в heroStore для хранения и обновления состояния героя,
 * а также в компонентах для отображения характеристик
 */
export interface HeroStats {
  /**
   * Индексная сигнатура для доступа к характеристикам по строковому ключу
   * Позволяет обращаться к свойствам динамически: stats[statName]
   */
  [key: string]: number | string;
  
  /** Максимальное здоровье героя */
  "max-health": number;
  
  /** Скорость регенерации здоровья (единиц в секунду) */
  "health-regen": number;
  
  /** Максимальный запас маны героя */
  "max-mana": number;
  
  /** Скорость регенерации маны (единиц в секунду) */
  "mana-regen": number;
  
  /** Базовый урон героя */
  "damage": number;
  
  /** Процент вампиризма (кражи жизни) от нанесенного урона */
  "vampirism": number;
  
  /** Скорость передвижения героя */
  "movement-speed": number;
  
  /** Пассивный доход золота в секунду */
  "income": number;
  
  /** Уникальный идентификатор героя */
  heroId: string;
}

//------------------------------------------------------------------------------
// Магазин и предметы
//------------------------------------------------------------------------------

/**
 * Интерфейс для предмета в магазине
 * Описывает структуру предмета, его свойства и метаданные
 * Используется при отображении предметов в интерфейсе магазина и покупке улучшений
 */
export interface ShopItem {
  /** Уникальный идентификатор предмета */
  id: string;
  
  /** Путь к изображению предмета для отображения */
  img: string;
  
  /** Название предмета, отображаемое в интерфейсе */
  title: string;
  
  /** Текущее значение бонуса, который дает предмет */
  value: number;
  
  /** Базовое значение бонуса предмета (начальное значение) */
  baseValue: number;
  
  /** Текущий уровень предмета (улучшения) */
  level: number;
  
  /** Базовая (начальная) цена предмета */
  basePrice: number;
  
  /** Текущая цена предмета с учетом уровня */
  currentPrice: number;
  
  /** Функция для расчета новой цены предмета после покупки */
  priceFormula: (currentPrice: number) => number;
}

/**
 * Интерфейс для категории магазина
 * Определяет визуальное представление и группировку предметов в магазине
 * Используется в UI компонентах для отображения разделов магазина
 */
export interface ShopCategory {
  /** Название категории */
  name: string;
  
  /** Путь к иконке категории */
  icon: string;
  
  /** Основной цвет категории для стилизации */
  color: string;
  
  /** CSS фильтр для применения к иконке */
  filter: string;
}

//------------------------------------------------------------------------------
// API запросы и ответы
//------------------------------------------------------------------------------

/**
 * Интерфейс для запроса обновления предмета на сервере
 * Содержит все данные, необходимые для обновления предмета и характеристик героя
 * Используется при отправке данных на сервер после покупки предмета
 */
export interface UpdateItemPayload {
  /** ID пользователя */
  userId: string;
  
  /** ID героя */
  heroId: string;
  
  /** ID предмета */
  itemId: string;
  
  /** Текущий уровень предмета после покупки */
  currentLevel: number;
  
  /** Текущее значение бонуса предмета */
  currentValue: number;
  
  /** Стоимость покупки улучшения */
  cost: number;
  
  /** Новая цена предмета после покупки */
  currentPrice: number;
  
  /** Максимальное здоровье героя после покупки */
  maxHealth?: number;
  
  /** Регенерация здоровья героя после покупки */
  healthRegen?: number;
  
  /** Максимальная мана героя после покупки */
  maxEnergy?: number;
  
  /** Регенерация маны героя после покупки */
  energyRegen?: number;
  
  /** Урон героя после покупки */
  damage?: number;
  
  /** Скорость передвижения героя после покупки */
  movementSpeed?: number;
  
  /** Вампиризм героя после покупки */
  vampirism?: number;
  
  /** Текущий пассивный доход героя после покупки */
  currentIncome?: number;
}

/**
 * Интерфейс для запроса обновления золота на сервере
 * Используется при синхронизации золота с сервером
 */
export interface UpdateGoldPayload {
  /** ID пользователя */
  userId: string;
  
  /** ID героя */
  heroId: string;
  
  /** Доход (прибавка к золоту) */
  income: number;
}

/**
 * Интерфейс для ответа API с данными о герое
 * Определяет формат данных, возвращаемых сервером
 */
export interface HeroDataResponse {
  /** ID героя */
  heroId: string;
  
  /** Имя героя */
  heroName: string;
  
  /** ID пользователя */
  userId: string;
  
  /** Количество золота */
  coins: number;
  
  /** Максимальное здоровье */
  maxHealth: number;
  
  /** Регенерация здоровья */
  healthRegen: number;
  
  /** Максимальная мана (энергия) */
  maxEnergy: number;
  
  /** Регенерация маны */
  energyRegen: number;
  
  /** Урон */
  damage: number;
  
  /** Скорость передвижения */
  movementSpeed: number;
  
  /** Вампиризм */
  vampirism: number;
  
  /** Текущий пассивный доход */
  currentIncome: number;
  
  /** Уровень героя */
  level: number;
}

/**
 * Интерфейс для ответа API со списком предметов героя
 * Определяет формат данных о предметах, возвращаемых сервером
 * Используется для маппинга данных в формат приложения
 */
export interface RawHeroItemsResponse {
  /** ID пользователя */
  userId: string;
  
  /** ID героя */
  heroId: string;
  
  /** Структура предметов по категориям */
  items: {
    /** Категория предметов (ключ) */
    [category: string]: {
      /** Предметы в категории (ключ - ID предмета) */
      [itemId: string]: {
        /** ID предмета */
        itemId: string;
        
        /** Название предмета */
        itemName: string;
        
        /** Базовое значение бонуса */
        baseValue: number;
        
        /** Текущий уровень предмета */
        currentLevel: number;
        
        /** Текущее значение бонуса */
        currentValue: number;
        
        /** Текущая цена предмета */
        currentPrice: number;
      };
    };
  };
}

/**
 * Интерфейс для представления одного предмета из ответа API
 * Используется как промежуточный тип при маппинге данных
 */
export interface ApiItem {
  /** Название предмета */
  itemName: string;
  
  /** Текущее значение бонуса */
  currentValue: number;
  
  /** Базовое значение бонуса */
  baseValue: number;
  
  /** Текущий уровень предмета */
  currentLevel: number;
  
  /** Текущая цена предмета */
  currentPrice: number;
}

