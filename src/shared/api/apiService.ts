// src/services/apiService.ts

import { API_BASE_URL, TEST_USER_ID, TEST_HERO_ID } from '../constants/index';
import { mapHeroData, mapItemsData } from './mappers';
import type { ShopItem } from '../types';
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥–µ—Ä–æ–µ
 */
export async function testApiConnection() {
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
  console.log(`–ë–∞–∑–æ–≤—ã–π URL: ${API_BASE_URL}`);
  console.log(`–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TEST_USER_ID}`);
  console.log(`–¢–µ—Å—Ç–æ–≤—ã–π –≥–µ—Ä–æ–π: ${TEST_HERO_ID}`);

  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const queryParams = new URLSearchParams({
    userId: TEST_USER_ID,
    heroId: TEST_HERO_ID
  }).toString();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /hero_data
    console.log(`–ó–∞–ø—Ä–æ—Å –∫ ${API_BASE_URL}/hero_data?${queryParams}`);
    const heroResponse = await fetch(`${API_BASE_URL}/hero_data?${queryParams}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!heroResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ hero_data: ${heroResponse.status} ${heroResponse.statusText}`);
    }

    const heroData = await heroResponse.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≥–µ—Ä–æ–µ:', heroData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /hero_items
    console.log(`–ó–∞–ø—Ä–æ—Å –∫ ${API_BASE_URL}/hero_items?${queryParams}`);
    const itemsResponse = await fetch(`${API_BASE_URL}/hero_items?${queryParams}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!itemsResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ hero_items: ${itemsResponse.status} ${itemsResponse.statusText}`);
    }

    const itemsData = await itemsResponse.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö:', itemsData);

    return {
      success: true,
      heroData,
      itemsData
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥
 * –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç testApiConnection, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–º–µ—Å—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
 */
export async function pingServer() {
  try {
    console.log(`–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ ${API_BASE_URL}...`);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç hero_data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const response = await fetch(`${API_BASE_URL}/hero_data?userId=${TEST_USER_ID}`, {
      method: 'GET',
      mode: 'cors',
      headers: {
        'Content-Type': 'application/json'
      },
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –¥–æ–ª–≥–æ
      signal: AbortSignal.timeout(5000)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    return {
      success: response.ok,
      status: response.status,
      statusText: response.statusText
    };
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export async function testPostRequest() {
  const testPayload = {
    userId: TEST_USER_ID,
    heroId: TEST_HERO_ID,
    income: 0
  };

  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${API_BASE_URL}/update_user_money`);
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', testPayload);
    
    const response = await fetch(`${API_BASE_URL}/update_user_money`, {
      method: 'POST',
      mode: 'cors',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testPayload)
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST –∑–∞–ø—Ä–æ—Å–∞: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω POST –∑–∞–ø—Ä–æ—Å:', data);
    return {
      success: true,
      data
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST –∑–∞–ø—Ä–æ—Å–∞:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
}

// –î–æ–±–∞–≤–∏–º –≤ src/shared/api/apiService.ts

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param heroId ID –≥–µ—Ä–æ—è
 * @returns –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function fetchHeroStats(userId: string, heroId: string) {
  try {
    console.log(`üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è: userId=${userId}, heroId=${heroId}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const query = new URLSearchParams({ userId, heroId }).toString();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await fetch(`${API_BASE_URL}/hero_data?${query}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ—Ä–æ—è: ${response.status} ${response.statusText}`);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
    const rawData = await response.json();
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ—è:', rawData);
    
    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
    const mappedStats = mapHeroData(rawData);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return {
      stats: mappedStats,
      gold: rawData.coins ?? 0,
      income: rawData.currentIncome ?? 0
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è:', error);
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥–µ—Ä–æ—è —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param heroId ID –≥–µ—Ä–æ—è
 * @returns –û–±—ä–µ–∫—Ç —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function fetchHeroItems(userId: string, heroId: string): Promise<Record<string, ShopItem[]> | null> {
  try {
    console.log(`üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≥–µ—Ä–æ—è: userId=${userId}, heroId=${heroId}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const query = new URLSearchParams({ userId, heroId }).toString();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await fetch(`${API_BASE_URL}/hero_items?${query}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${response.status} ${response.statusText}`);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
    const rawData = await response.json();
    console.log('üõçÔ∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö:', rawData);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const items = mapItemsData(rawData);
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ baseValue –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.keys(items).forEach(category => {
      if (Array.isArray(items[category])) {
        items[category].sort((a, b) => a.baseValue - b.baseValue);
      }
    });
    
    return items;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥–µ—Ä–æ—è:', error);
    return null;
  }
}

// –û–±–Ω–æ–≤–∏–º –≤ src/shared/api/apiService.ts

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
export async function testHeroStats() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è...');
  const result = await fetchHeroStats(TEST_USER_ID, TEST_HERO_ID);
  
  if (result) {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è:');
    console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', result);
    console.log('–ú–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', result.stats);
    return result;
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è');
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥–µ—Ä–æ—è –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
export async function testHeroItems() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥–µ—Ä–æ—è...');
  const items = await fetchHeroItems(TEST_USER_ID, TEST_HERO_ID);
  
  if (items) {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≥–µ—Ä–æ—è:');
    console.log('–ú–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:', items);
    
    // –í—ã–≤–µ–¥–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const totalItems = Object.values(items).reduce((sum, arr) => sum + arr.length, 0);
    console.log(`–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${Object.keys(items).length}`);
    console.log(`–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${totalItems}`);
    
    // –í—ã–≤–µ–¥–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const firstCategory = Object.keys(items)[0];
    if (firstCategory && items[firstCategory].length > 0) {
      console.log('–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:', items[firstCategory][0]);
    }
    
    return items;
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –≥–µ—Ä–æ—è');
    return null;
  }
}
// –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:
// import { testHeroStats } from './src/shared/api/apiService';
// testHeroStats().then(data => console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data));

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * @param payload - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export async function updateItemLevel(payload: {
  userId: string;
  heroId: string;
  itemId: string;
  currentLevel: number;
  currentValue: number;
  cost: number;
  currentPrice: number;
  maxHealth: number;
  healthRegen: number;
  maxEnergy: number;
  energyRegen: number;
  damage: number;
  movementSpeed: number;
  vampirism: number;
  currentIncome: number;
}) {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', payload);
    
    const response = await fetch(`${API_BASE_URL}/update_item_level`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  }
}