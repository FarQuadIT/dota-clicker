https://react.pixijs.io/

Getting Started
To add @pixi/react to an existing React application, install the necessary dependencies:

npm install pixi.js@^8.2.6 @pixi/react@beta

Does it have limitations?
None. Everything that works in Pixi.js will work here without exception.

Can it keep up with frequent feature updates to Pixi.js?
Yes. @pixi/react is a thin wrapper around Pixi.js, allowing it to be expressed via JSX. For example, <pixiSprite> is backed by a Pixi.js Sprite. If a feature is added, removed, or changed in Pixi.js, those changes will be available to you without updating @pixi/react.

What does it look like?
Let's make a reusable component that has its own state, reacts to user-input and participates in the render-loop:

import {
    Application,
    extend,
} from '@pixi/react';
import {
    Container,
    Graphics,
    Sprite,
} from 'pixi.js';

import { BunnySprite } from './BunnySprite'

// extend tells @pixi/react what Pixi.js components are available
extend({
    Container,
    Graphics,
    Sprite,
});

export default function App() {
    return (
        // We'll wrap our components with an <Application> component to provide
        // the Pixi.js Application context
        <Application>
            <BunnySprite />
        </Application>
    );
}

import {
    Assets,
    Texture,
} from 'pixi.js';
import {
    useEffect,
    useRef,
    useState,
} from 'react';
import { useTick } from '@pixi/react';

export function BunnySprite() {
    // The Pixi.js `Sprite`
    const spriteRef = useRef(null)

    const [texture, setTexture] = useState(Texture.EMPTY)
    const [isHovered, setIsHover] = useState(false)
    const [isActive, setIsActive] = useState(false)

    // Preload the sprite if it hasn't been loaded yet
    useEffect(() => {
        if (texture === Texture.EMPTY) {
            Assets
                .load('https://pixijs.com/assets/bunny.png')
                .then((result) => {
                    setTexture(result)
                });
        }
    }, [texture]);

    return (
        <pixiSprite
            ref={spriteRef}
            anchor={0.5}
            eventMode={'static'}
            onClick={(event) => setIsActive(!isActive)}
            onPointerOver={(event) => setIsHover(true)}
            onPointerOut={(event) => setIsHover(false)}
            scale={isActive ? 1 : 1.5}
            texture={texture}
            x={100}
            y={100} />
    );
}

Application
The <Application> component is used to wrap your @pixi/react app. The <Application> component can take all props that can be set on PIXI.Application.

Example Usage
import { Application } from '@pixi/react';

const MyComponent = () => (
    <Application autoStart sharedTicker />
);

Props
defaultTextStyle
defaultTextStyle is a convenience property. Whatever is passed will automatically be assigned to Pixi.js's TextStyle.defaultTextStyle.

[!NOTE] This property is not retroactive. It will only apply to text components created after defaultTextStyle is set. Any text components created before setting defaultTextStyle will retain the base styles they had before defaultTextStyle was changed.

extensions
extensions is an array of extensions to be loaded. Adding and removing items from this array will automatically load/unload the extensions. The first time this is handled happens before the application is initialised. See Pixi.js's extensions documentation for more info on extensions.

resizeTo
The <Application> component supports the resizeTo property, with some additional functionality: it can accept any HTML element or it can take a React ref directly.

import { Application } from '@pixi/react';
import { useRef } from 'react';

const MyComponent = () => {
    const parentRef = useRef(null);

    return (
        <div ref={parentRef}>
            <Application resizeTo={parentRef} />
        </div>
    );
};

Pixi.js Components
All Pixi.js classes should be available as components. They should also be included in your IDE's intellisense/autocomplete once you've installed/imported @pixi/react. So long as it's exported from Pixi.js, it's supported as a component with the pixi prefix. Here's a selection of commonly used components:

<pixiContainer />
<pixiGraphics />
<pixiSprite />
<pixiAnimatedSprite />
<pixiText />
<pixiHtmlText />

Additionally, all properties of Pixi.js classes are available as properties on these components.

<pixiContainer x={100} y={100}>
    <pixiSprite anchor={{ 0.5, 0.5 }} texture={texture} />
</pixiContainer>

Special Properties
Some components have special properties to support non-conforming APIs.

<pixiGraphics>
draw
draw takes a callback which receives the Graphics context. Drawing will happen on every tick.

<pixiGraphics draw={(graphics) => {
    graphics.clear();
    graphics.setFillStyle({ color: 'red' });
    graphics.rect(0, 0, 100, 100);
    graphics.fill();
}} />

Custom Components
Custom components are supported via the extend API. For example, you can create a <viewport> component using the pixi-viewport library:

import {
    Application,
    extend,
} from '@pixi/react';
import { Viewport } from 'pixi-viewport';

extend({ Viewport });

const MyComponent = () => (
    <Application>
        <pixiViewport>
            <pixiContainer />
        </pixiViewport>
    </Application>
);

The extend API will teach @pixi/react about your components, but TypeScript won't know about them nor their props. If you're using Typescript, check out our docs for Typescript Users.

useApplication
useApplication allows access to the parent PIXI.Application created by the <Application> component. This hook will not work outside of an <Application> component. Additionally, the parent application is passed via React Context. This means useApplication will only work appropriately in child components, and in the same component that creates the <Application>.

For example, the following example useApplication will not be able to access the parent application:

import {
    Application,
    useApplication,
} from '@pixi/react';

const MyComponent = () => {
    // This will cause an invariant violation.
    const { app } = useApplication();

    return <Application />;
};

Here's a working example where useApplication will be able to access the parent application:

import {
    Application,
    useApplication,
} from '@pixi/react';

const ChildComponent = () => {
    const { app } = useApplication();

    return <container />;
};

const MyComponent = () => (
    <Application>
        <ChildComponent />
    </Application>
);


useExtend
useExtend allows the extend API to be used as a React hook. Additionally, the useExtend hook is memoised, while the extend function is not.

import {
    Application,
    useExtend,
} from '@pixi/react';
import { Container } from 'pixi.js';

function ChildComponent() {
    useExtend({ Container });

    return <pixiContainer />;
};

const MyComponent = () => (
    <Application>
        <ChildComponent />
    </Application>
);

useTick
useTick allows a callback to be attached to the Ticker on the parent application.

import {
    Application,
    useTick,
} from '@pixi/react';

const ChildComponent = () => {
    useTick(() => console.log('This will be logged on every tick'));
};

const MyComponent = () => (
    <Application>
        <ChildComponent />
    </Application>
);

useTick can also accept an options object. This allows control of all ticker.add options, as well as adding the isEnabled option. Setting isEnabled to false will cause the callback to be disabled until the argument is changed to true again.

import {
    Application,
    useTick,
} from '@pixi/react';
import { UPDATE_PRIORITY } from 'pixi.js'
import { useRef } from 'react'

const ChildComponent = () => {
    const spriteRef = useRef(null)

    useTick({
        callback() {
            // this === context
            this.current.rotation += 1
        },
        context: spriteRef,
        isEnabled: true,
        priority: UPDATE_PRIORITY.HIGH,
    })

    return <pixiSprite ref={spriteRef} />
};

const MyComponent = () => (
    <Application>
        <ChildComponent />
    </Application>
);

⚠️ WARNING ⚠️
The callback passed to useTick is not memoised. This can cause issues where your callback is being removed and added back to the ticker on every frame if you're mutating state in a component where useTick is using a non-memoised function. For example, this issue would affect the component below because we are mutating the state, causing the component to re-render constantly:

import {
    Application,
    useTick,
} from '@pixi/react';
import { useState } from 'react'

const ChildComponent = () => {
    const [rotation, setRotation] = useState(0)

    useTick(() => setRotation(previousState => previousState + 1));

    return <pixiSprite rotation={rotation} />;
};

const MyComponent = () => (
    <Application>
        <ChildComponent />
    </Application>
);

This issue can be solved by memoising the callback passed to useTick:

import {
    Application,
    useTick,
} from '@pixi/react';
import { useCallback, useState } from 'react'

const ChildComponent = () => {
    const [rotation, setRotation] = useState(0)

    const animateRotation = useCallback(() => setRotation(previousState => previousState + 1), []);

    useTick(animateRotation);

    return <pixiSprite rotation={rotation} />;
};

const MyComponent = () => (
    <Application>
        <ChildComponent />
    </Application>
);

extend
One of the most important concepts to understand with v8 is extend. Normally @pixi/react would have to import all of Pixi.js to be able to provide the full library as JSX components. Instead, we use an internal catalogue of components populated by the extend API. This allows you to define exactly which parts of Pixi.js you want to import, keeping your bundle sizes small.

To allow @pixi/react to use a Pixi.js component, pass it to the extend API:

import {
    Application,
    extend,
} from '@pixi/react';
import { Container } from 'pixi.js';

extend({ Container });

const MyComponent = () => (
    <pixiContainer />
);

Typescript
Extending Built-in Components
The props for built-in components are available on the PixiElements type and can be used to extend the built-in types.

import { type Texture } from 'pixi.js';
import { type PixiElements } from '@pixi/react';

export type TilingSpriteProps = PixiElements['pixiTilingSprite'] & {
    image?: string;
    texture?: Texture;
};

Custom Components
@pixi/react already offers types for built-in components, but custom components need to be added to the library's type catalogue so it knows how to handle them. This can be achieved by adding your custom components to the PixiElements interface. Here's what it may look like to add the viewport component from our earlier extend example:

// global.d.ts
import { type Viewport } from 'pixi-viewport';
import { type PixiReactElementProps } from '@pixi/react';

declare module '@pixi/react'
{
    interface PixiElements
    {
        viewport: PixiReactElementProps<typeof Viewport>;
    }
}

Now you'll be able to use your custom component in your project without any type errors!

Unprefixed Elements
If you like to live life on the wild side, you can enable unprefixed Pixi elements (i.e. <container> instead of <pixiContainer>) by adding the UnprefixedPixiElements interface to the PixiElements interface.

// global.d.ts
import { type UnprefixedPixiElements } from '@pixi/react';

declare module '@pixi/react'
{
    interface PixiElements extends UnprefixedPixiElements {}
}

The prefixed and unprefixed elements have the same functionality, but we recommend sticking to the prefixed components to avoid collisions with other libraries that add intrinsic elements to JSX (such as react-dom and @react-three/fiber).

[!IMPORTANT] Some components conflict with other libaries, such as <svg> in react-dom and <color> in @react-three/fiber. To address this the pixi prefixed elements are always available, even after injecting the unprefixed elements.